 /*
    Generate Paranthesis
     */

    public static void generateParanthesis(int n) {
        String ans = "";
        generateParanthesis(n, 0, 0, ans);
    }

    private static void generateParanthesis(int n, int open, int close, String ans) {
        if(open == n && close == n) {
            System.out.println(ans);
            return;
        }

        if(open < n) {
            generateParanthesis(n, open+1, close, ans+"(");
        }

        if(close < open) {
            generateParanthesis(n, open, close+1, ans+")");
        }
    }

    /*
        Letter Combinations of a Phone Number
Description: Given a string containing digits from 2-9 inclusive, return all possible letter combinations that the number could represent.

Example:

Input: "23"
Output: ["ad", "ae", "af", "bd", "be", "bf", "cd", "ce", "cf"]
     */
    public static void letterCombinations(String digits) {
        if(digits == null || digits.isEmpty()) {
            return;
        }

        List<String> result = new ArrayList<>();
        String[] mapping = new String[] {
                "0", "1", "abc", "def", "ghi", "jkl", "mno", "pqrs", "tuv", "wxyz"
        };

        letterCombinations(digits, result, mapping, "", 0);
        System.out.println(result);
    }

    private static void letterCombinations(String digits, List<String> result, String[] mapping, String current, int index) {
        if(index == digits.length()) {
            result.add(current);
            return;
        }

        String letters = mapping[digits.charAt(index)-'0'];
        for(int i=0;i<letters.length();i++) {
            letterCombinations(digits, result, mapping, current+letters.charAt(i), index+1);
        }
    }

    /*
    Permutations
Description: Given a collection of distinct integers, return all possible permutations.

Example:

Input: [1, 2, 3]
Output: [[1,2,3], [1,3,2], [2,1,3], [2,3,1], [3,1,2], [3,2,1]]
     */
    public static List<List<Integer>> permute(int[] nums) {
        List<List<Integer>> result = new ArrayList<>();
        permute(nums, result, new ArrayList<>());
        return result;
    }

    private static void permute(int[] nums, List<List<Integer>> result, List<Integer> current) {
        if(current.size() == nums.length) {
            result.add(new ArrayList<>(current));
            return;
        }

        for(int i=0;i<nums.length;i++) {
            if(current.contains(nums[i])) {
                continue;
            }
            current.add(nums[i]);
            permute(nums, result, current);
            current.remove(current.size()-1);
        }
    }


/*
    Combinations
Description: Given two integers n and k, return all possible combinations of k numbers out of 1 ... n.

Example:

Input: n = 4, k = 2
Output: [[2,4], [3,4], [2,3], [1,2], [1,3], [1,4]]
     */
    public static List<List<Integer>> combine(int n, int k) {
        List<List<Integer>> result = new ArrayList<>();
        combine(n, k, result, new ArrayList<>(), 1);
        return result;
    }
    
    private static void combine(int n, int k, List<List<Integer>> result, List<Integer> current, int start) {
        if(current.size() == k) {
            result.add(new ArrayList<>(current));
            return;
        }
        
        for(int i=start;i<=n;i++) {
            current.add(i);
            combine(n, k, result, current, i+1);
            current.remove(current.size()-1);
        }
    }


/*
Subsets
Description: Given a set of distinct integers, return all possible subsets.

Example:

Input: [1, 2, 3]
Output: [[], [1], [2], [3], [1,2], [1,3], [2,3], [1,2,3]]
 */
    public static List<List<Integer>> subsets(int[] nums) {
        List<List<Integer>> result = new ArrayList<>();
        subsets(nums, result, new ArrayList<>(), 0);
        return result;
    }

    private static void subsets(int[] nums, List<List<Integer>> result, List<Integer> current, int index) {
        result.add(new ArrayList<>(current));
        for(int i=index;i<nums.length;i++) {
            current.add(nums[i]);
            subsets(nums, result, current, i+1);
            current.remove(current.size()-1);
        }
    }


 /*
    Word Search
    Description: Given a 2D board and a word, find if the word exists in the grid. The word can be constructed from letters of sequentially adjacent cells, where "adjacent" cells are those horizontally or vertically neighboring.

Example:

Input: board = [['A','B','C','E'], ['S','F','C','S'], ['A','D','E','E']], word = "ABCCED"
Output: true
     */
    public static boolean exist(char[][] board, String word) {
        if (board == null || board.length == 0 || word == null || word.isEmpty()) {
            return false;
        }

        int m = board.length;
        int n = board[0].length;

        boolean[][] visited = new boolean[m][n];

        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (board[i][j] == word.charAt(0) && exist(board, word, visited, i, j, 0)) {
                    return true;
                }
            }
        }

        return false;
    }
    
    private static boolean exist(char[][] board, String word, boolean[][] visited, int i, int j, int index) {
        if (index == word.length()) {
            return true;
        }

        if (i < 0 || i >= board.length || j < 0 || j >= board[0].length || visited[i][j] || board[i][j] != word.charAt(index)) {
            return false;
        }

        visited[i][j] = true;

        if (exist(board, word, visited, i + 1, j, index + 1) ||
                exist(board, word, visited, i - 1, j, index + 1) ||
                exist(board, word, visited, i, j + 1, index + 1) ||
                exist(board, word, visited, i, j - 1, index + 1)) {
            return true;
        }

        visited[i][j] = false;
        return false;
    }


/*
    Palindrome Partitioning
Description: Given a string s, partition s such that every substring of the partition is a palindrome. Return all possible palindrome partitioning of s.

Example:

Input: "aab"
Output: [['a', 'a', 'b'], ['aa', 'b']]
     */
    public static List<List<String>> partition(String s) {
        List<List<String>> result = new ArrayList<>();
        partition(s, result, new ArrayList<>(), 0);
        return result;
    }
    
    private static void partition(String s, List<List<String>> result, List<String> current, int index) {
        if(index == s.length()) {
            result.add(new ArrayList<>(current));
            return;
        }
        
        for(int i=index;i<s.length();i++) {
            if(isPalindrome(s, index, i)) {
                current.add(s.substring(index, i+1));
                partition(s, result, current, i+1);
                current.remove(current.size()-1);
            }
        }
    }
    
    private static boolean isPalindrome(String s, int start, int end) {
        while(start < end) {
            if(s.charAt(start++) != s.charAt(end--)) {
                return false;
            }
        }
        return true;
    }


/*
   generate binary numbers of given length
    */
    public static void generateBinaryNumbers(int n) {
        generateBinaryNumbers(n, "", 0);
    }

    private static void generateBinaryNumbers(int n, String ans, int count) {
        if(count == n) {
            System.out.println(ans);
            return;
        }

        generateBinaryNumbers(n, ans+"0", count+1);
        generateBinaryNumbers(n, ans+"1", count+1);
    }
    
    /*
    Combination Sum
Description: Given an array of distinct integers candidates and a target integer target, return a list of all unique combinations of candidates where the chosen numbers sum to target.

Example:

Input: candidates = [2,3,6,7], target = 7
Output: [[7], [2,2,3]]
     */
    public static List<List<Integer>> combinationSum(int[] candidates, int target) {
        List<List<Integer>> result = new ArrayList<>();
        combinationSum(candidates, target, result, new ArrayList<>(), 0, 0);
        return result;
    }
    
    private static void combinationSum(int[] candidates, int target, List<List<Integer>> result, List<Integer> current, int sum, int index) {
        if(sum == target) {
            result.add(new ArrayList<>(current));
            return;
        }
        
        if(sum > target) {
            return;
        }
        
        for(int i=index;i<candidates.length;i++) {
            current.add(candidates[i]);
            combinationSum(candidates, target, result, current, sum+candidates[i], i);
            current.remove(current.size()-1);
        }
    }