1. Longest Palindromic Subsequence
Description: Find the longest subsequence in a given string which is also a palindrome. A subsequence is a sequence that can be derived from another sequence by deleting some or no elements without changing the order of the remaining elements.

Example:

Input: "bbbab"
Output: 4 (The longest palindromic subsequence is "bbbb")

 public static int longestPalindromicSubsequence(String s) {
        if (s == null || s.isEmpty()) {
            return 0;
        }

        int n = s.length();
        int[][] dp = new int[n][n];

        for (int i = 0; i < n; i++) {
            dp[i][i] = 1;
        }

        for(int i=2; i<=n; i++) {
            for(int j=0; j<n-i+1; j++) {
                int k = j+i-1;
                if(s.charAt(j) == s.charAt(k)) {
                    dp[j][k] = dp[j+1][k-1] + 2;
                } else {
                    dp[j][k] = Math.max(dp[j+1][k], dp[j][k-1]);
                }
            }
        }
        return dp[0][n-1];
    }


2. Shortest Palindrome
Description: Given a string, find the shortest palindrome you can get by adding characters in front of it.

Example:

Input: "aacecaaa"
Output: "aaacecaaa"

public static String shortestPalindrome(String s) {
        if(s == null || s.isEmpty()) {
            return "";
        }

        int n = s.length();
        int i = 0;

        for(int j=n-1; j>=0;j--) {
            if(s.charAt(i) == s.charAt(j)) {
                i++;
            }
        }

        if(i == n){
            return s;
        }

        String suffix = s.substring(i);
        String prefix = new StringBuilder(suffix).reverse().toString();
        String mid = shortestPalindrome(s.substring(0,i));

        return prefix+mid+suffix;
    }

3. Palindromic Substrings
Description: Count how many palindromic substrings are present in a given string.

Example:

Input: "aaa"
Output: 6 (The palindromic substrings are "a", "a", "a", "aa", "aa", "aaa")

public static int countNumberOfPalindromicSubstrings(String s) {
        if(s==null || s.isEmpty()) return 0;

        int n = s.length();
        int count = 0;

        for(int i=0; i<n; i++) {
            count += countPalindromes(s, i, i);
            count += countPalindromes(s, i, i+1);
        }
        return count;
    }

    private static int countPalindromes(String s, int left, int right) {
        int count = 0;
        while(left>=0 && right<s.length() && s.charAt(left) == s.charAt(right)) {
            count++;
            left--;
            right++;
        }
        return count;
    }

4. Longest Substring Without Repeating Characters
Description: Find the length of the longest substring without repeating characters.

Example:

Input: "abcabcbb"
Output: 3 (The longest substring is "abc")

 public static int longestSubstringWithNoRepeatingCharacters(String s) {
        if(s == null || s.isEmpty()) {
            return 0;
        }

        int n = s.length();

        int[] map = new int[256];

        int start = 0;

        int max = 0;

        for(int i=0; i<n; i++) {
            char c = s.charAt(i);
            if(map[c] > 0) {
                start = Math.max(start, map[c]);
            }
            map[c] = i+1;
            max = Math.max(max, i-start+1);
        }
//        System.out.println(s.substring(start, start+max));  
        return max;
    }

5. Longest Common Substring
Description: Given two strings, find the length of their longest common substring.

Example:

Input: str1 = "ABABC", str2 = "BABCA"
Output: 4 (The longest common substring is "BABC")

public static int longestCommonSubstring(String s1, String s2) {
        if(s1 == null || s1.isEmpty() || s2 == null || s2.isEmpty()) {
            return 0;
        }

        int n = s1.length();
        int m = s2.length();

        int[][] dp = new int[n+1][m+1];

        int max = 0;
        int start = 0;

        for(int i=1; i<=n; i++) {
            for(int j=1; j<=m; j++) {
                if(s1.charAt(i-1) == s2.charAt(j-1)) {
                    start = i-1;
                    dp[i][j] = dp[i-1][j-1] + 1;
                    max = Math.max(max, dp[i][j]);
                }
            }
        }
        // System.out.println(s1.substring(start, start+max));
        return max;
    }



6. Longest Common Subsequence
Description: Given two sequences, find the length of the longest subsequence present in both of them. A subsequence is a sequence that appears in the same relative order, but not necessarily consecutively.

Example:

Input: str1 = "abcde", str2 = "ace"
Output: 3 (The longest common subsequence is "ace")

public static int longestCommonSubsequence(String s1, String s2) {
        if(s1 == null || s1.isEmpty() || s2 == null || s2.isEmpty()) {
            return 0;
        }

        int n = s1.length();
        int m = s2.length();

        int[][] dp = new int[n+1][m+1];

        for(int i=1; i<=n; i++) {
            for(int j=1; j<=m ; j++) {
                if(s1.charAt(i-1) == s2.charAt(j-1)) {
                    dp[i][j] = dp[i-1][j-1] + 1;
                } else {
                    dp[i][j] = Math.max(dp[i][j-1], dp[i-1][j]);
                }
            }
        }

        return dp[n][m];
    }

7. Longest Repeated Substring
Description: Find the longest substring that appears more than once in a given string.

Example:

Input: "banana"
Output: "ana"

public static String longestRepeatedSubstring(String s) {
        if(s == null || s.isEmpty()) {
            return "";
        }

        int n = s.length();

        int[][] dp = new int[n+1][n+1];

        int max = 0;
        int end = 0;

        for(int i=1; i<=n;i++) {
            for(int j=i+1; j<=n; j++) {
                if(s.charAt(i-1) == s.charAt(j-1) && dp[i-1][j-1] < (j-i)) {
                    dp[i][j] = dp[i-1][j-1] + 1;
                    if(dp[i][j] > max) {
                        max = dp[i][j];
                        end = i;
                    }
                } else {
                    dp[i][j] = 0;
                }
            }
        }

        return s.substring(end-max, end+1);
    }

8. Minimum Insertions to Form a Palindrome
Description: Given a string, find the minimum number of insertions required to make the string a palindrome.

Example:

Input: "abc"
Output: 2 (Insertions: "cbabc" or "abcba")
9. Valid Palindrome with Deletions
Description: Given a string, determine if it can be made into a palindrome by deleting at most one character.

Example:

Input: "abca"
Output: true (By deleting b or c, the string becomes a palindrome)
10. Longest Substring with At Most K Distinct Characters
Description: Given a string, find the length of the longest substring that contains at most K distinct characters.

Example:

Input: "eceba", k = 2
Output: 3 (The longest substring with at most 2 distinct characters is "ece")
11. Longest Repeating Character Replacement
Description: Given a string and an integer k, you can choose any character of the string and change it to any other uppercase English character. Find the length of the longest substring containing the same letter you can get after performing this operation at most k times.

Example:

Input: s = "AABABBA", k = 1
Output: 4 (Replace one 'B' with 'A' to get "AAAA")
12. Edit Distance
Description: Given two strings, determine the minimum number of operations (insertions, deletions, or substitutions) required to convert one string into the other.

Example:

Input: str1 = "horse", str2 = "ros"
Output: 3 (Operations: horse -> rorse -> rose -> ros)